import React, { useState, useRef, useEffect } from 'react';
import { 
  View, 
  Text, 
  TextInput, 
  TouchableOpacity, 
  ScrollView, 
  StyleSheet,
  KeyboardAvoidingView,
  Platform
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  language?: string;
}

export default function AITutorScreen() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§µ‡§ø‡§∑‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§ó‡§£‡§ø‡§§, ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®, ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä, ‡§Ø‡§æ ‡§ï‡•ã‡§°‡§ø‡§Ç‡§ó - ‡§Æ‡•à‡§Ç ‡§∏‡§≠‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å! üìö',
      isUser: false,
      timestamp: new Date(),
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [loading, setLoading] = useState(false);
  const [selectedSubject, setSelectedSubject] = useState('all');
  const scrollViewRef = useRef<ScrollView>(null);

  const subjects = [
    { id: 'all', name: '‡§∏‡§≠‡•Ä', icon: 'library', color: '#64748b' },
    { id: 'math', name: '‡§ó‡§£‡§ø‡§§', icon: 'calculator', color: '#3B82F6' },
    { id: 'science', name: '‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®', icon: 'flask', color: '#10B981' },
    { id: 'english', name: '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä', icon: 'language', color: '#F59E0B' },
    { id: 'coding', name: '‡§ï‡•ã‡§°‡§ø‡§Ç‡§ó', icon: 'code-slash', color: '#8B5CF6' },
  ];

  const quickQuestions = [
    '‡§¶‡•ç‡§µ‡§ø‡§ò‡§æ‡§§ ‡§∏‡§Æ‡•Ä‡§ï‡§∞‡§£ ‡§ï‡•à‡§∏‡•á ‡§π‡§≤ ‡§ï‡§∞‡•á‡§Ç?',
    '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§∏‡§Ç‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?',
    'Python ‡§Æ‡•á‡§Ç loop ‡§ï‡•à‡§∏‡•á ‡§≤‡§ø‡§ñ‡•á‡§Ç?',
    '‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä grammar ‡§ï‡•á ‡§®‡§ø‡§Ø‡§Æ',
  ];

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    setTimeout(() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const sendMessage = async (text?: string) => {
    const messageText = text || inputText.trim();
    if (!messageText) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setLoading(true);

    // Simulate AI response based on subject
    setTimeout(() => {
      let aiResponse = '';
      
      if (messageText.includes('‡§ó‡§£‡§ø‡§§') || messageText.includes('‡§∏‡§Æ‡•Ä‡§ï‡§∞‡§£')) {
        aiResponse = '‡§ó‡§£‡§ø‡§§ ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å! ‡§¶‡•ç‡§µ‡§ø‡§ò‡§æ‡§§ ‡§∏‡§Æ‡•Ä‡§ï‡§∞‡§£ ax¬≤ + bx + c = 0 ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Ç‡§§‡•ç‡§∞ ‡§π‡•à: x = (-b ¬± ‚àö(b¬≤-4ac)) / 2a‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? üßÆ';
      } else if (messageText.includes('‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®') || messageText.includes('‡§™‡•ç‡§∞‡§ï‡§æ‡§∂')) {
        aiResponse = '‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§∏‡§Ç‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§è‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§™‡•å‡§ß‡•á ‡§∏‡•Ç‡§∞‡•ç‡§Ø ‡§ï‡•Ä ‡§∞‡•ã‡§∂‡§®‡•Ä, ‡§ï‡§æ‡§∞‡•ç‡§¨‡§® ‡§°‡§æ‡§á‡§ë‡§ï‡•ç‡§∏‡§æ‡§á‡§° ‡§î‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§≠‡•ã‡§ú‡§® ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§á‡§∏‡§ï‡§æ ‡§∏‡•Ç‡§§‡•ç‡§∞ ‡§π‡•à: 6CO‚ÇÇ + 6H‚ÇÇO + ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂ ‡§ä‡§∞‡•ç‡§ú‡§æ ‚Üí C‚ÇÜH‚ÇÅ‚ÇÇO‚ÇÜ + 6O‚ÇÇ üå±';
      } else if (messageText.includes('‡§ï‡•ã‡§°‡§ø‡§Ç‡§ó') || messageText.includes('Python')) {
        aiResponse = 'Python ‡§Æ‡•á‡§Ç loop ‡§≤‡§ø‡§ñ‡§®‡§æ ‡§¨‡§π‡•Å‡§§ ‡§Ü‡§∏‡§æ‡§® ‡§π‡•à!\n\nFor loop:\nfor i in range(5):\n    print(i)\n\nWhile loop:\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1\n\n‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•ã‡§à specific example ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? üíª';
      } else if (messageText.includes('‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä') || messageText.includes('grammar')) {
        aiResponse = 'English grammar ‡§ï‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§®‡§ø‡§Ø‡§Æ:\n\n1. Subject + Verb + Object\n2. Present tense: I/You/We/They + verb\n3. He/She/It + verb + s\n4. Articles: a, an, the ‡§ï‡§æ ‡§∏‡§π‡•Ä ‡§â‡§™‡§Ø‡•ã‡§ó\n\n‡§ï‡•ã‡§à specific topic ‡§™‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è? üìñ';
      } else {
        aiResponse = '‡§Ø‡§π ‡§è‡§ï ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à! ‡§Æ‡•à‡§Ç ‡§á‡§∏‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? ‡§Æ‡•à‡§Ç ‡§ó‡§£‡§ø‡§§, ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®, ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä, ‡§î‡§∞ ‡§ï‡•ã‡§°‡§ø‡§Ç‡§ó ‡§∏‡§≠‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ü§î';
      }

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: aiResponse,
        isUser: false,
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, aiMessage]);
      setLoading(false);
    }, 1500);
  };

  return (
    <KeyboardAvoidingView 
      style={styles.container} 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerLeft}>
          <Ionicons name="chatbubbles" size={24} color="#3B82F6" />
          <Text style={styles.headerTitle}>AI ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï</Text>
        </View>
        <TouchableOpacity style={styles.headerButton}>
          <Ionicons name="refresh" size={20} color="#64748b" />
        </TouchableOpacity>
      </View>

      {/* Subject Selector */}
      <ScrollView 
        horizontal 
        style={styles.subjectSelector} 
        showsHorizontalScrollIndicator={false}
      >
        {subjects.map((subject) => (
          <TouchableOpacity
            key={subject.id}
            style={[
              styles.subjectButton,
              selectedSubject === subject.id && { backgroundColor: subject.color }
            ]}
            onPress={() => setSelectedSubject(subject.id)}
          >
            <Ionicons 
              name={subject.icon as any} 
              size={18} 
              color={selectedSubject === subject.id ? 'white' : subject.color} 
            />
            <Text style={[
              styles.subjectText,
              selectedSubject === subject.id && { color: 'white' }
            ]}>
              {subject.name}
            </Text>
          </TouchableOpacity>
        ))}
      </ScrollView>

      {/* Messages */}
      <ScrollView 
        ref={scrollViewRef}
        style={styles.messagesContainer}
        showsVerticalScrollIndicator={false}
      >
        {messages.map((message) => (
          <View
            key={message.id}
            style={[
              styles.messageContainer,
              message.isUser ? styles.userMessage : styles.aiMessage
            ]}
          >
            {!message.isUser && (
              <View style={styles.aiAvatar}>
                <Ionicons name="school" size={16} color="#3B82F6" />
              </View>
            )}
            <View style={[
              styles.messageBubble,
              message.isUser ? styles.userBubble : styles.aiBubble
            ]}>
              <Text style={[
                styles.messageText,
                message.isUser ? styles.userMessageText : styles.aiMessageText
              ]}>
                {message.text}
              </Text>
              <Text style={styles.messageTime}>
                {message.timestamp.toLocaleTimeString('hi-IN', { 
                  hour: '2-digit', 
                  minute: '2-digit' 
                })}
              </Text>
            </View>
          </View>
        ))}
        
        {loading && (
          <View style={[styles.messageContainer, styles.aiMessage]}>
            <View style={styles.aiAvatar}>
              <Ionicons name="school" size={16} color="#3B82F6" />
            </View>
            <View style={styles.loadingBubble}>
              <Text style={styles.loadingText}>AI ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...</Text>
            </View>
          </View>
        )}
      </ScrollView>

      {/* Quick Questions */}
      {messages.length === 1 && (
        <View style={styles.quickQuestions}>
          <Text style={styles.quickTitle}>‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§∏‡§µ‡§æ‡§≤:</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            {quickQuestions.map((question, index) => (
              <TouchableOpacity
                key={index}
                style={styles.quickButton}
                onPress={() => sendMessage(question)}
              >
                <Text style={styles.quickButtonText}>{question}</Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>
      )}

      {/* Input */}
      <View style={styles.inputContainer}>
        <TextInput
          style={styles.textInput}
          value={inputText}
          onChangeText={setInputText}
          placeholder="‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç..."
          multiline
          maxLength={500}
        />
        <TouchableOpacity
          style={[styles.sendButton, !inputText.trim() && styles.sendButtonDisabled]}
          onPress={() => sendMessage()}
          disabled={!inputText.trim() || loading}
        >
          <Ionicons name="send" size={20} color="white" />
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8fafc',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    paddingTop: 50,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1e293b',
    marginLeft: 10,
  },
  headerButton: {
    padding: 8,
  },
  subjectSelector: {
    backgroundColor: 'white',
    paddingVertical: 15,
    paddingHorizontal: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
  },
  subjectButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingVertical: 8,
    marginRight: 10,
    borderRadius: 20,
    backgroundColor: '#f1f5f9',
  },
  subjectText: {
    fontSize: 14,
    color: '#64748b',
    marginLeft: 5,
  },
  messagesContainer: {
    flex: 1,
    padding: 15,
  },
  messageContainer: {
    marginBottom: 15,
    maxWidth: '85%',
  },
  userMessage: {
    alignSelf: 'flex-end',
  },
  aiMessage: {
    alignSelf: 'flex-start',
    flexDirection: 'row',
  },
  aiAvatar: {
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: '#e0f2fe',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 10,
  },
  messageBubble: {
    borderRadius: 15,
    padding: 12,
    maxWidth: '100%',
  },
  userBubble: {
    backgroundColor: '#3B82F6',
    borderBottomRightRadius: 5,
  },
  aiBubble: {
    backgroundColor: 'white',
    borderBottomLeftRadius: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
  },
  userMessageText: {
    color: 'white',
  },
  aiMessageText: {
    color: '#1e293b',
  },
  messageTime: {
    fontSize: 12,
    opacity: 0.7,
    marginTop: 5,
  },
  loadingBubble: {
    backgroundColor: 'white',
    borderRadius: 15,
    borderBottomLeftRadius: 5,
    padding: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  loadingText: {
    color: '#64748b',
    fontStyle: 'italic',
  },
  quickQuestions: {
    backgroundColor: 'white',
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: '#e2e8f0',
  },
  quickTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#64748b',
    marginBottom: 10,
  },
  quickButton: {
    backgroundColor: '#f1f5f9',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 15,
    marginRight: 10,
  },
  quickButtonText: {
    fontSize: 14,
    color: '#3B82F6',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 15,
    backgroundColor: 'white',
    alignItems: 'flex-end',
    borderTopWidth: 1,
    borderTopColor: '#e2e8f0',
  },
  textInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#e2e8f0',
    borderRadius: 20,
    paddingHorizontal: 15,
    paddingVertical: 10,
    maxHeight: 100,
    fontSize: 16,
    backgroundColor: '#f8fafc',
  },
  sendButton: {
    backgroundColor: '#3B82F6',
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 10,
  },
  sendButtonDisabled: {
    backgroundColor: '#cbd5e1',
  },
});